#!/usr/bin/env bash

# This script serves as the build step for scipy/numpy and other packages
# that  depend on numpy and sciypy for the
# [**Python Buildpack**](https://github.com/heroku/heroku-buildpack-python) 
# compiler. 
# 
# A [buildpack](http://devcenter.heroku.com/articles/buildpacks) is an 
# adapter between a Python application and Heroku's runtime.
#
# This script is invoked by [`bin/compile`](/).
VENDORED_GIT_NAME="npscipy-binaries"
VENDORED_GIT_REPO="https://github.com/textioHQ/$VENDORED_GIT_NAME.git"
# The location of the pre-compiled atlas/lapack/blas/gfortran binaries.
VENDORED_BINARIES="npscipy"

PACKAGES=("numpy" "scipy" "scikit-learn")
DEFAULT_VERSIONS=("1.8.1" "0.14.0" "0.15-git")

bpwatch start npscipy_install

if (grep -iq -e "numpy" -e "scipy" requirements.txt) then
  echo "-----> Noticed numpy/scipy/scikit-learn. Bootstrapping prebuilt binaries."
  cd .heroku
  ## check whether this has happened already
  if [ -d "vendor/lib/atlas-base" ]; then
    echo "-----> Using cached binaries for atlas."
  else
    git clone -n $VENDORED_GIT_REPO --depth 1
    ## set BLAS/LAPACK/ATLAS
    echo "-----> Creating/downloading binaries."
    # Download and extract everything into target vendor directory.
    #git clone ${VENDORED_GIT_REPO} > /dev/null
    cd $VENDORED_GIT_NAME
    git checkout HEAD $VENDORED_BINARIES.tar.gz
    cd ..
    tar xf "$VENDORED_GIT_NAME/$VENDORED_BINARIES.tar.gz"
    echo "-----> heroku contents: $(ls)"
    echo "-----> heroku binaries contents: $(ls ${VENDORED_GIT_NAME})"
  fi # cached
  export BLAS=$(pwd)/vendor/lib/atlas-base/atlas/libblas.a
  export LAPACK=$(pwd)/vendor/lib/atlas-base/atlas/liblapack.a
  export ATLAS=$(pwd)/vendor/lib/atlas-base/libatlas.a
  export LIBRARY_PATH=$(pwd)/vendor/lib:$(pwd)/lib/atlas-base:$(pwd)/lib/atlas-base/atlas
  export LD_LIBRARY_PATH=$(pwd)/vendor/lib:$(pwd)/lib/atlas-base:$(pwd)/lib/atlas-base/atlas

  PACKAGE_LEN=${PACKAGES[@]}
  for (( i=0; i <= PACKAGE_LEN; i++))
  do
      PACKAGE=${PACKAGES[i]}
      VERSION=${DEFAULT_VERSIONS[i]}
      echo "-----> Looking for package $PACKAGE : $VERSION"    
      cd $VENDORED_GIT_NAME
      DEFAULT_VERSION=$DEFAULT_VERSIONS[$i]
      NAME="$PACKAGE-$DEFAULT_VERSION"

      git checkout HEAD $NAME.tar.gz

      cd ../python
      tar xf "../$VENDORED_GIT_NAME/$NAME.tar.gz"
      echo "-----> Completed Creating/downloading $PACKAGE-$VERSION by unzipping $VENDORED_GIT_NAME/$NAME.tar.gz." 
      cd ..
  done
  cd ..
fi
bpwatch stop npscipy_install
